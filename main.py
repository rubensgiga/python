from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import sqlite3
import datetime
import random
import logging

BOT_TOKEN = "7081150298:AAET-CUC2OsIElP6n2kDDihM-v6HGt-ybPo"

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

DATABASE_NAME = "sensei.db"

def create_connection():
    conn = None
    try:
        conn = sqlite3.connect(DATABASE_NAME, check_same_thread=False)
        logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö {DATABASE_NAME} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    return conn

def create_table(conn):
    try:
        cursor = conn.cursor()
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS progress (
            user_id INTEGER,
            date TEXT,
            status TEXT
        )
        """)
        conn.commit()
        logger.info("–¢–∞–±–ª–∏—Ü–∞ 'progress' —Å–æ–∑–¥–∞–Ω–∞ (–∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∞)")
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")

conn = create_connection()  # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
if conn is not None:
    create_table(conn)
else:
    logger.critical("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
    exit()

MOTIVATION = [
    "–°–ª–∞–±–æ—Å—Ç—å ‚Äî —ç—Ç–æ –≤—ã–±–æ—Ä. –ö–∞–∫ –∏ —Å–∏–ª–∞.",
    "–¢—ã –ª–∏–±–æ –∫—É—é—Ç —Ç–µ–±—è, –ª–∏–±–æ —Ç—ã —Ä–∂–∞–≤–µ–µ—à—å.",
    "–ù–µ—Ç –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è? –†–∞–±–æ—Ç–∞–π. –û–Ω–æ –ø—Ä–∏–¥—ë—Ç –ø–æ–∑–∂–µ.",
    "–ò—Å—Ç–∏–Ω–∞ –ø—Ä–æ—Å—Ç–∞: –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ > –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ.",
    "–ï—Å–ª–∏ –Ω–µ —Ç—ã ‚Äî —Ç–æ –∫—Ç–æ? –ï—Å–ª–∏ –Ω–µ —Å–µ–π—á–∞—Å ‚Äî —Ç–æ –∫–æ–≥–¥–∞?"
]

PUNISHMENT = [
    "–¢—ã –ø–æ–¥–≤—ë–ª —Å–µ–±—è. –í—Å—Ç–∞–Ω—å. –ò—Å–ø—Ä–∞–≤—å.",
    "–°—Ç—Ä–∞–¥–∞–Ω–∏–µ –æ—á–∏—â–∞–µ—Ç. –ó–∞–≤—Ç—Ä–∞ ‚Äî –≤–¥–≤–æ–π–Ω–µ.",
    "–ú–æ–ª—á–∞–Ω–∏–µ ‚Äî –ø–æ–∑–æ—Ä. –î–µ–π—Å—Ç–≤–∏–µ ‚Äî –ø—É—Ç—å.",
    "–•–æ—á–µ—à—å –±—ã—Ç—å –≥–µ–Ω–∏–µ–º? –¢–µ—Ä–ø–∏. –ò –¥–µ–ª–∞–π.",
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /start")
    await update.message.reply_text(
        f"‚öîÔ∏è –ü—Ä–∏–≤–µ—Ç, –≤–æ–∏–Ω {user.first_name or user.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}. –Ø ‚Äî –°—ç–Ω—Å–µ–π. –ì–æ—Ç–æ–≤ —Å–ª–µ–¥–æ–≤–∞—Ç—å –ü—É—Ç–∏?\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/—è_–≥–æ—Ç–æ–≤ ‚Äî –Ω–∞—á–∞—Ç—å –¥–µ–Ω—å\n"
        "/–æ—Ç—á–µ—Ç <—Ç–µ–∫—Å—Ç> ‚Äî –æ—Ç–ø—Ä–∞–≤—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n"
        "/–ø—Ä–æ–ø—É—Å—Ç–∏–ª ‚Äî –ø—Ä–æ–ø—É—Å–∫ –¥–Ω—è\n"
        "/–Ω–∞–∫–∞–∂–∏ ‚Äî –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞\n"
        "/—Å—Ç–∞—Ç—É—Å ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—É—Ç—å\n"
        "/–∫–ª—è—Ç–≤–∞ ‚Äî —É—Å–ª—ã—à–∞—Ç—å –µ—ë —Å–Ω–æ–≤–∞"
    )

async def ya_gotov(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    date = str(datetime.date.today())
    try:
        cursor = conn.cursor()
        cursor.execute("INSERT INTO progress (user_id, date, status) VALUES (?, ?, ?)", (user_id, date, "‚úî"))
        conn.commit()
        await update.message.reply_text("‚úÖ –î–µ–Ω—å –ø—Ä–∏–Ω—è—Ç. –î–µ–π—Å—Ç–≤—É–π. –°–µ–Ω—Å–µ–π —Å–º–æ—Ç—Ä–∏—Ç.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ—Ç–∏–ª –¥–µ–Ω—å –∫–∞–∫ '—è –≥–æ—Ç–æ–≤'")
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def otchet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = ' '.join(context.args)
    user_id = update.effective_user.id
    if not text:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç—á—ë—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –≤–æ–∏–Ω.")
        return
    try:
        # –ú–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –æ—Ç—á—ë—Ç—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        await update.message.reply_text("üìù –û—Ç—á—ë—Ç –ø—Ä–∏–Ω—è—Ç. –¢–≤–æ—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –∫—Ä–µ–ø–Ω–µ—Ç.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç—á–µ—Ç: {text[:50]}...")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç—á–µ—Ç–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def propustil(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    date = str(datetime.date.today())
    try:
        cursor = conn.cursor()
        cursor.execute("INSERT INTO progress (user_id, date, status) VALUES (?, ?, ?)", (user_id, date, "‚ùå"))
        conn.commit()
        await update.message.reply_text("‚ùå –°–ª–∞–±–æ, –≤–æ–∏–Ω. –ó–∞–≤—Ç—Ä–∞ –±—É–¥—å –ª—É—á—à–µ.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ—Ç–∏–ª –¥–µ–Ω—å –∫–∞–∫ '–ø—Ä–æ–ø—É—Å—Ç–∏–ª'")
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def nakazhi(update: Update, context: ContextTypes.DEFAULT_TYPE):
    quote = random.choice(PUNISHMENT)
    await update.message.reply_text(f"üî• {quote}")
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—Ä–æ—Å–∏–ª '–Ω–∞–∫–∞–∑–∞–Ω–∏–µ'")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT status FROM progress WHERE user_id = ?", (user_id,))
        rows = cursor.fetchall()
        total = len(rows)
        success = sum(1 for r in rows if r[0] == "‚úî")
        fail = sum(1 for r in rows if r[0] == "‚ùå")
        await update.message.reply_text(f"üìä –î–Ω–µ–π –ø—Ä–æ–π–¥–µ–Ω–æ: {success}\n‚ùå –°–æ—Ä–≤–∞–Ω–æ: {fail}\nüìÖ –í—Å–µ–≥–æ: {total}")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç—É—Å")
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def klyatva(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üß¨ *–ö–ª—è—Ç–≤–∞ —É—á–µ–Ω–∏–∫–∞ –ü—É—Ç–∏:*\n\n"
        "–Ø –∫–ª—è–Ω—É—Å—å –ø—Ä–µ–±—ã–≤–∞—Ç—å –≤ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ.\n"
        "–ö–ª—è–Ω—É—Å—å –±—ã—Ç—å –≥–µ–Ω–∏–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.\n"
        "–ö–ª—è–Ω—É—Å—å –∏–¥—Ç–∏ –∫ —Å–≤–µ—Ç—É, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –±–æ–ª—å.\n"
        "–°–µ–Ω—Å–µ–π ‚Äî —Å–≤–∏–¥–µ—Ç–µ–ª—å –º–æ–µ–π –≤–æ–ª–∏.",
        parse_mode="Markdown"
    )
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—Ä–æ—Å–∏–ª '–∫–ª—è—Ç–≤—É'")

if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    # –ó–¥–µ—Å—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –±–µ–∑ –æ—à–∏–±–æ–∫
    app.add_handler(CommandHandler("—è_–≥–æ—Ç–æ–≤", ya_gotov))
    app.add_handler(CommandHandler("–æ—Ç—á–µ—Ç", otchet))
    app.add_handler(CommandHandler("–ø—Ä–æ–ø—É—Å—Ç–∏–ª", propustil))
    app.add_handler(CommandHandler("–Ω–∞–∫–∞–∂–∏", nakazhi))
    app.add_handler(CommandHandler("—Å—Ç–∞—Ç—É—Å", status))
    app.add_handler(CommandHandler("–∫–ª—è—Ç–≤–∞", klyatva))

    logger.info("‚öôÔ∏è –ë–æ—Ç –°–µ–Ω—Å–µ–π –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
